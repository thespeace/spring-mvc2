spring.application.name=spring-mvc2

spring.messages.basename=messages,errors

#TrackingModes : 웹 브라우저가 쿠키를 지원하지 않을 때 쿠키 대신 URL을 통해서 세션을 유지하는 방법.
#URL 전달 방식을 끄고 항상 쿠키를 통해서만 세션을 유지하고 싶으면 다음 옵션을 넣어주면 된다.
server.servlet.session.tracking-modes=cookie

#스프링 부트로 세션 타임아웃 글로벌 설정, DEFAULT : 1800초
server.servlet.session.timeout=1800

#스프링 부트가 제공하는 기본 예외 페이지 off
server.error.whitelabel.enabled=false


#BasicErrorController 오류 컨트롤러에서 다음 오류 정보를 model 에 포함할지 여부 설정

    #`exception`포함 여부( true , false )
    server.error.include-exception=true

    #`message` 포함 여부(always(항상 사용) || on_param(파라미터가 있을 때 사용) || never(사용하지 않음))
    server.error.include-message=always

    #`trace` 포함 여부(always(항상 사용) || on_param(파라미터가 있을 때 사용) || never(사용하지 않음))
    server.error.include-stacktrace=never

    #`errors` 포함 여부(always(항상 사용) || on_param(파라미터가 있을 때 사용) || never(사용하지 않음))
    server.error.include-binding-errors=never


#스프링 부트 오류 관련 옵션

    #오류 페이지 경로, 스프링이 자동 등록하는 서블릿 글로벌 오류 페이지 경로와 BasicErrorController 오류 컨트롤러 경로에 함께 사용된다. default : `/error`
    server.error.path=/error


#이 옵션을 사용하면 HTTP 요청 메시지를 확인할 수 있다
logging.level.org.apache.coyote.http11=trace

#멀티파트 사용 옵션

    #파일 하나의 최대 사이즈 제한
    spring.servlet.multipart.max-file-size=1MB

    #멀티파트 요청 하나에 여러 파일 업로드 시, 그 전체 합의 사이즈 제한
    spring.servlet.multipart.max-request-size=10MB

    #서블릿 컨테이너의 멀티파트 관련 처리 여부 활성화(default : true)/비활성화(false)
    spring.servlet.multipart.enabled=true
    #spring.servlet.multipart.enabled 옵션을 켜면 스프링의 DispatcherServlet 에서 멀티파트 리졸버( MultipartResolver )를 실행한다.
    #멀티파트 리졸버는 멀티파트 요청인 경우 서블릿 컨테이너가 전달하는 일반적인 HttpServletRequest 를 #MultipartHttpServletRequest 로 변환해서 반환한다.
    #MultipartHttpServletRequest 는 HttpServletRequest 의 자식 인터페이스이고, 멀티파트와 관련된 추가 기능을 제공한다.
    #스프링이 제공하는 기본 멀티파트 리졸버는 MultipartHttpServletRequest 인터페이스를 구현한 StandardMultipartHttpServletRequest 를 반환한다.
    #이제 컨트롤러에서 HttpServletRequest 대신에 MultipartHttpServletRequest 를 주입받을 수 있는데, 이것을 사용하면 멀티파트와 관련된 여러가지 처리를 편리하게 할 수 있다.
    #더 자세한 내용은 MultipartResolver를 검색해보자.



#파일 업로드 경로 설정
file.dir=C:/